buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

evaluationDependsOnChildren()

version = "${majorVersion}.${minorVersion}.${patchVersion}"
if (!"${postfixVersion}".isEmpty()) {
    version += "-${postfixVersion}"
}

group = 'net.roguelogix.biggerreactors'
archivesBaseName = "biggerreactors-${mc_version}"

minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            arg "-mixin.config=phosphophyllite.mixins.json"
            arg "-mixin.config=quartz.mixins.json"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
                Quartz {
                    source project(':Quartz').sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
                Quartz {
                    source project(':Quartz').sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

//            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
                Quartz {
                    source project(':Quartz').sourceSets.main
                }
                Phosphophyllite {
                    source project(':Phosphophyllite').sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url 'https://modmaven.k-4u.nl/'
    }
    maven {
        url 'https://modmaven.dev/'
    }
    maven {
        url 'https://squiddev.cc/maven/'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly project(':Phosphophyllite')
    compileOnly project(':Quartz')

    compileOnly fg.deobf("org.squiddev:cc-tweaked-${cc_mc_version}:${cc_version}")
//    runtimeOnly fg.deobf("org.squiddev:cc-tweaked-${cc_mc_version}:${cc_version}")
//
    compileOnly "mekanism:Mekanism:1.19.2-10.3.5.474:api"
    runtimeOnly fg.deobf('curse.maven:MEK-268560:4041164')
    runtimeOnly fg.deobf('curse.maven:MEKG-268566:4041168')
    runtimeOnly fg.deobf('curse.maven:COFHCore-69162:4112121')
    runtimeOnly fg.deobf('curse.maven:ThermalFoundation-222880:4112137')
    runtimeOnly fg.deobf('curse.maven:ThermalExpansion-69163:4112130')

//    runtimeOnly fg.deobf('curse.maven:JEI-238222:3683240')
//    runtimeOnly fg.deobf('curse.maven:WorldStripper-250603:3545856')
//    runtimeOnly fg.deobf('curse.maven:CW-399558:3562331')

    compileOnly "org.lwjgl:lwjgl-opencl:3.3.1"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "BiggerReactors",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publish.dependsOn('reobfJar')

//task generateModeratorCsv(type: net.roguelogix.Json5ToCsvTask) {
//    records = ["type", "location", "absorption", "efficiency", "moderation", "conductivity"]
//    jsonInputs = fileTree(dir: "src/main/resources/data/biggerreactors/ebcr/moderators/", include: "**/*.json*")
//    csvOutput = file("$buildDir/data/moderators.csv")
//}
//
//task generateCoilCsv(type: net.roguelogix.Json5ToCsvTask) {
//    records = ["type", "location", "efficiency", "extractionRate", "bonus"]
//    jsonInputs = fileTree(dir: "src/main/resources/data/biggerreactors/ebest/coils/", include: "**/*.json*")
//    csvOutput = file("$buildDir/data/coils.csv")
//}
//
//task generateModeratorWikimedia(type: net.roguelogix.CsvToWikimediaTask, dependsOn: generateModeratorCsv) {
//    csvInput = generateModeratorCsv.outputs.files[0]
//    txtOutput = file("$buildDir/data/moderators.txt")
//}
//
//task generateCoilWikimedia(type: net.roguelogix.CsvToWikimediaTask, dependsOn: generateCoilCsv) {
//    csvInput = generateCoilCsv.outputs.files[0]
//    txtOutput = file("$buildDir/data/coils.txt")
//}

gradle.projectsEvaluated {
    var phosVersionRange = project.project(":Phosphophyllite").property("compatibility").toString().split(',')
    var phosMinVersion = phosVersionRange[0].substring(1)
    var phosMaxVersion = phosVersionRange[1].substring(1, phosVersionRange[1].length() - 1)
    var phosRequirementString = "Requires [Phosphophyllite](https://www.curseforge.com/minecraft/mc-mods/phosphophyllite) version of at least " + phosMinVersion + " but less than " + phosMaxVersion

    var quartzVersionRange = project.project(":Quartz").property("compatibility").toString().split(',')
    var quartzMinVersion = quartzVersionRange[0].substring(1)
    var quartzMaxVersion = quartzVersionRange[1].substring(1, quartzVersionRange[1].length() - 1)
    var quartzRequirementString = "Requires [Quartz](https://www.curseforge.com/minecraft/mc-mods/quartz) version of at least " + quartzMinVersion + " but less than " + quartzMaxVersion

    println(phosRequirementString)
    println(quartzRequirementString)

    println("::set-output name=phos_version_range::" + phosRequirementString)
    println("::set-output name=quartz_version_range::" + quartzRequirementString)


    def resource_targets = ["META-INF/mods.toml", "pack.mcmeta"]
    def into_targets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
    def properties = [
            version         : version,
            fmlVersion      : forge_version.substring(0, forge_version.indexOf('.')),
            forgeVersion    : forge_version,
            mcVersion       : mc_version,
            phosVersionRange: project.project(":Phosphophyllite").property("compatibility").toString(),
            quartzVersionRange: project.project(":Quartz").property("compatibility").toString()
    ]
    processResources {
        duplicatesStrategy = 'INCLUDE'
        inputs.properties properties

        def spec = copySpec {
            from(sourceSets.main.resources) {
                include resource_targets
                expand properties
            }
        }

        with spec
        into_targets.each {
            def file = file(it)
            if (file.exists()) {
                copy {
                    with spec
                    into file
                }
            }
        }

        from(sourceSets.main.resources) {
            exclude resource_targets
        }
    }
}