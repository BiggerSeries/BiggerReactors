buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

version = '0.5.0'
group = 'net.roguelogix.biggerreactors' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "biggerreactors-${mc_version}"

minecraft {
        mappings channel: 'official', version: "${mc_version}"
        // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

//            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                BiggerReactors {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url 'https://modmaven.k-4u.nl/'
    }
    maven {
        url 'https://modmaven.dev/'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Fixes ResolutionException. See https://github.com/MinecraftForge/MinecraftForge/issues/7893.
    implementation('cpw.mods:securejarhandler') { version { strictly '0.9.45' } }

    compileOnly project(':Phosphophyllite')

//    compileOnly fg.deobf("org.squiddev:cc-tweaked-${cc_mc_version}:${cc_version}")
//
//    compileOnly "mekanism:Mekanism:${mekanism_mc_version}-${mekanism_version}:api"

    // compile against the JEI API but do not include it at runtime
//    compileOnly fg.deobf("mezz.jei:jei-${jei_mc_version}:${jei_version}:api")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"   : "BiggerReactors",
//                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version" : "1", // We are version 1 of ourselves
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${version}",
//                "Implementation-Vendor"   : "examplemodsareus",
//                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

//task generateModeratorCsv(type: net.roguelogix.Json5ToCsvTask) {
//    records = ["type", "location", "absorption", "efficiency", "moderation", "conductivity"]
//    jsonInputs = fileTree(dir: "src/main/resources/data/biggerreactors/ebcr/moderators/", include: "**/*.json*")
//    csvOutput = file("$buildDir/data/moderators.csv")
//}
//
//task generateCoilCsv(type: net.roguelogix.Json5ToCsvTask) {
//    records = ["type", "location", "efficiency", "extractionRate", "bonus"]
//    jsonInputs = fileTree(dir: "src/main/resources/data/biggerreactors/ebest/coils/", include: "**/*.json*")
//    csvOutput = file("$buildDir/data/coils.csv")
//}
//
//task generateModeratorWikimedia(type: net.roguelogix.CsvToWikimediaTask, dependsOn: generateModeratorCsv) {
//    csvInput = generateModeratorCsv.outputs.files[0]
//    txtOutput = file("$buildDir/data/moderators.txt")
//}
//
//task generateCoilWikimedia(type: net.roguelogix.CsvToWikimediaTask, dependsOn: generateCoilCsv) {
//    csvInput = generateCoilCsv.outputs.files[0]
//    txtOutput = file("$buildDir/data/coils.txt")
//}